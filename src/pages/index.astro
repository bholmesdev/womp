---
import {
  newSound,
  editEmoji,
  editFile,
  NewSoundDropZone,
  EditCard,
} from "../components/Boards";
import { ViewTransitions } from "astro:transitions";
import { db, eq, Sound } from "astro:db";
import { safeId } from "../utils";
import untypedData, { type EmojiMartData } from "@emoji-mart/data";
import { Board } from "astro:db";

export const prerender = false;

const user = Astro.locals.user;
if (!user) {
  return Astro.redirect("/login");
}

let board = await db
  .select({ id: Board.id })
  .from(Board)
  .where(eq(Board.userId, user.id))
  .get();

if (!board) {
  board = await db
    .insert(Board)
    .values({
      name: user.username,
      userId: user.id,
    })
    .returning({ id: Board.id })
    .get();
}

const data = untypedData as EmojiMartData;

const { R2 } = Astro.locals.runtime.env;
const newSoundReq = await Astro.locals.form.getDataByName(
  "new-sound",
  newSound
);

const editEmojiReq = await Astro.locals.form.getDataByName(
  "edit-emoji",
  editEmoji
);

const editFileReq = await Astro.locals.form.getDataByName(
  "edit-file",
  editFile
);

if (editEmojiReq?.data) {
  const { id, emojiId, emojiSkin = null } = editEmojiReq.data;
  const entry = await db
    .select({ key: Sound.audioFileKey })
    .from(Sound)
    .where(eq(Sound.id, id))
    .get();
  if (!entry) {
    Astro.response.status = 404;
    Astro.response.statusText = `Sound ${id} not found`;
  } else {
    await db
      .update(Sound)
      .set({
        emojiId,
        emojiSkin,
      })
      .where(eq(Sound.id, id));
  }
}

if (editFileReq?.data) {
  const { id, audioFile } = editFileReq.data;
  const entry = await db
    .select({ key: Sound.audioFileKey })
    .from(Sound)
    .where(eq(Sound.id, id))
    .get();
  if (!entry) {
    Astro.response.status = 404;
    Astro.response.statusText = `Sound ${id} not found`;
  } else {
    const { key } = entry;
    const buffer = await audioFile.arrayBuffer();
    const kb500 = 500 * 1024;
    if (buffer.byteLength > kb500) {
      return new Response("File too large", { status: 413 });
    }
    await R2.put(key, buffer);
    await db
      .update(Sound)
      .set({
        audioFileName: audioFile.name,
      })
      .where(eq(Sound.id, id));
  }
}

if (newSoundReq?.data) {
  const { audioFiles } = newSoundReq.data;

  for (const audioFile of audioFiles) {
    const key = `${safeId()}-${audioFile.name}`;

    const buffer = await audioFile.arrayBuffer();
    const kb500 = 500 * 1024;
    if (buffer.byteLength > kb500) {
      return new Response("File too large", { status: 413 });
    }
    await R2.put(key, buffer);

    const emojis = Object.values(data.emojis);
    const randomIdx = Math.floor(Math.random() * emojis.length);

    await db.insert(Sound).values({
      boardId: board.id,
      emojiId: emojis[randomIdx]!.id,
      audioFileName: audioFile.name,
      audioFileKey: key,
    });
  }
}

const sounds = await db
  .select({
    id: Sound.id,
    emojiId: Sound.emojiId,
    emojiSkin: Sound.emojiSkin,
    audioFileName: Sound.audioFileName,
    audioFileKey: Sound.audioFileKey,
  })
  .from(Sound);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />
    <title>WOMP</title>
  </head>
  <body class="dark:bg-gray-950 dark:text-white min-h-screen flex flex-col">
    <section>
      <h2>CO2 usage</h2>
      <co2-usage class="flex max-w-[60ch]">
        <div class="bg-blue-500 h-8 rounded transition-all" data-server></div>
        <div class="bg-green-300 h-8 rounded transition-all" data-client></div>
      </co2-usage>
    </section>
    <div
      class="px-3 max-w-screen-md m-auto grid sm:grid-cols-3 grid-cols-2 gap-3"
    >
      {
        sounds.map((s) => (
          <EditCard
            client:load
            id={s.id}
            audioFileKey={s.audioFileKey}
            audioFileName={s.audioFileName}
            emojiId={s.emojiId}
            emojiSkin={s.emojiSkin ?? undefined}
          />
        ))
      }
    </div>
    <div
      class="flex-1 sticky bottom-0 dark:bg-gray-950 grid place-items-stretch"
    >
      <NewSoundDropZone client:load />
    </div>
    <script>
      import { actions } from "astro:actions";

      window.customElements.define(
        "co2-usage",
        class extends HTMLElement {
          server = this.querySelector("[data-server]") as HTMLElement;
          client = this.querySelector("[data-client]") as HTMLElement;

          connectedCallback() {
            setInterval(async () => {
              const co2Entries = await actions.getCo2({
                referer: window.location.href,
              });
              const co2 = co2Entries.reduce(
                (acc: { server: number; client: number }, entry) => {
                  return {
                    server: acc.server + entry.server,
                    client: acc.client + entry.client,
                  };
                },
                { server: 0, client: 0 }
              );
              console.log(co2);
              this.server.style.width = `${co2.server * Math.pow(10, 5)}%`;
              this.client.style.width = `${co2.client * Math.pow(10, 6)}%`;
            }, 500);
          }
        }
      );
    </script>
  </body>
</html>
