---
import {
  newSound,
  editEmoji,
  editFile,
  NewSoundDropZone,
  EditCard,
} from "../components/Boards";
import { ViewTransitions } from "astro:transitions";
import { db, eq, Sound } from "astro:db";
import { safeId } from "../utils";

const { R2 } = Astro.locals.runtime.env;
const newSoundReq = await Astro.locals.form.getDataByName(
  "new-sound",
  newSound
);

const editEmojiReq = await Astro.locals.form.getDataByName(
  "edit-emoji",
  editEmoji
);

const editFileReq = await Astro.locals.form.getDataByName(
  "edit-file",
  editFile
);

if (editEmojiReq?.data) {
  const { id, emojiId, emojiSkin = null } = editEmojiReq.data;
  const entry = await db
    .select({ key: Sound.audioFileKey })
    .from(Sound)
    .where(eq(Sound.id, id))
    .get();
  if (!entry) {
    Astro.response.status = 404;
    Astro.response.statusText = `Sound ${id} not found`;
  } else {
    await db
      .update(Sound)
      .set({
        emojiId,
        emojiSkin,
      })
      .where(eq(Sound.id, id));
  }
}

if (editFileReq?.data) {
  const { id, audioFile } = editFileReq.data;
  const entry = await db
    .select({ key: Sound.audioFileKey })
    .from(Sound)
    .where(eq(Sound.id, id))
    .get();
  if (!entry) {
    Astro.response.status = 404;
    Astro.response.statusText = `Sound ${id} not found`;
  } else {
    const { key } = entry;
    await R2.put(key, await audioFile.arrayBuffer());
    await db
      .update(Sound)
      .set({
        audioFileName: audioFile.name,
      })
      .where(eq(Sound.id, id));
  }
}

if (newSoundReq?.data) {
  const { audioFile } = newSoundReq.data;
  const key = `${safeId()}-${audioFile.name}`;

  await R2.put(key, await audioFile.arrayBuffer());

  await db.insert(Sound).values({
    boardId: "TODO-board-id",
    emojiId: "airplane",
    audioFileName: audioFile.name,
    audioFileKey: key,
  });
}

const sounds = await db
  .select({
    id: Sound.id,
    emojiId: Sound.emojiId,
    emojiSkin: Sound.emojiSkin,
    audioFileName: Sound.audioFileName,
    audioFileKey: Sound.audioFileKey,
  })
  .from(Sound);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />
    <title>WOMP</title>
  </head>
  <body class="dark:bg-gray-950 dark:text-white min-h-screen flex flex-col">
    <h1>WOMP</h1>
    <div class="px-3 max-w-screen-lg grid sm:grid-cols-3 grid-cols-2 gap-3">
      {
        sounds.map((s) => (
          <EditCard
            client:load
            id={s.id}
            audioFileKey={s.audioFileKey}
            audioFileName={s.audioFileName}
            emojiId={s.emojiId}
            emojiSkin={s.emojiSkin ?? undefined}
          />
        ))
      }
    </div>
    <div
      class="flex-1 sticky bottom-0 dark:bg-gray-950 grid place-items-stretch"
    >
      <NewSoundDropZone client:load />
    </div>
  </body>
</html>
